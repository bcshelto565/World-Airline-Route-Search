Sources:
- Adjacency Matrix
-   https://byjus.com/maths/adjacency-matrix/
  -   "Adjacency Matrix." Byju's, Byju's, byjus.com/maths/adjacency-matrix/.
-   https://www.geeksforgeeks.org/c-program-to-implement-adjacency-matrix-of-a-given-graph/
  -   "C program to implement Adjacency Matrix of a given Graph." Geeks For Geeks, edited by Sandeep Jain, 21 May 2020, www.geeksforgeeks.org/c-program-to-implement-adjacency-matrix-of-a-given-graph/.
- Array of Linked Lists
-   https://www.geeksforgeeks.org/array-of-linked-list-in-c-cpp/
  -   "Array of Linked Lists in C/C++." Geeks For Geeks, edited by Sandeep Jain, 11 Oct. 2021, www.geeksforgeeks.org/array-of-linked-list-in-c-cpp/.
- BFS Search Method
  - https://www.geeksforgeeks.org/implementation-of-bfs-using-adjacency-matrix/
- DFS Search Method
  - https://www.geeksforgeeks.org/implementation-of-dfs-using-adjacency-matrix/
https://www.math.utah.edu/~gustafso/s2016/2270/labs/lab3-adjacency.pdf
________________________________
Some notes:
- From "https://www.geeksforgeeks.org/graph-and-its-representations/" : 
  - Adjceny Matrix:
  - Pros: Representation is easier to implement and follow. Removing an edge takes O(1) time. Queries like whether there is an edge from vertex ‘u’ to vertex ‘v’ are efficient and can be done O(1). (This seems better for problem one)
  - Cons: Consumes more space O(V^2). Even if the graph is sparse (contains less number of edges), it consumes the same space. Adding a vertex is O(V^2) time. Computing all neighbors of a vertex takes O(V) time (Not efficient).
  - Adjency List:
  - Pros: Saves space O(|V|+|E|). In the worst case, there can be C(V, 2) number of edges in a graph thus consuming O(V^2) space. Adding a vertex is easier. Computing all neighbors of a vertex takes optimal time.
  - Cons: Queries like whether there is an edge from vertex u to vertex v are not efficient and can be done O(V).
 In Real-life problems, graphs are sparse(|E| <<|V|2). That’s why adjacency lists Data structure is commonly used for storing graphs. Adjacency matrix will enforce (|V|2) bound on time complexity for such algorithms. 

________________________________
Some thoughts:
- Does this need to be a weighted graph? 
  - Typically used in searches when trying to find the shortest distance between two nodes....however this may not be necessary for our project because it looks like we're counting edges (connections) and not calculating distance?
